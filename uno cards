import cv2
import os
import numpy as np
import matplotlib.pyplot as plt   
plt.rcParams['figure.dpi'] = 100    # use to set reslution for all images

# folder path
dir_path = r'./images/'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
data=[]
for z in res:    
    img_colour = cv2.imread('./images/'+z)   # open the saved image in colour
    img = cv2.cvtColor(img_colour, cv2.COLOR_BGR2GRAY)   # convert to B/W
    img_sm = cv2.blur(img, (5, 5))         # smoothing
    thr_value, img_th = cv2.threshold(img_sm, 0, 255, cv2.THRESH_OTSU)   # binarisation
    kernel = np.ones((5, 5), np.uint8)
    img_close = cv2.morphologyEx(img_th, cv2.MORPH_OPEN, kernel)      # morphology correction
    img_canny = cv2.Canny(img_close, 50, 100)                          # edge detection
    contours, hierarchy = cv2.findContours(img_close, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)   # extract contours on binarised image, not on canny
    contours = sorted(contours, key=cv2.contourArea,reverse=True)
    for i, c in enumerate(contours):         # loop through all the found contours
            #print(i, ':', hierarchy[0, i])          # display contour hierarchy
            #print('length: ', len(c))               # display numbr of points in contour c
            perimeter = cv2.arcLength(c, True)     # perimeter of contour c (curved length)
            #print('perimeter: ', perimeter)               
            epsilon = 0.02*perimeter   
            vertex_approx = len(cv2.approxPolyDP(c, epsilon, True))   
        
            cv2.drawContours(img_close, [c], 0, (0, 255, 0), 3)   # paint 
            cv2.putText(img, str(i), (c[0, 0, 0]+20, c[0, 0, 1]+30), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 255))    # identify contour c
    [x,y,w,h] = cv2.boundingRect(contours[0])
    cv2.rectangle(img, (x,y), (x+w,y+h), (255, 0, 0), 2)
    img_crop = img_colour[y:y+h,x:x+w] 
    img_crop_HSV = cv2.cvtColor(img_crop, cv2.COLOR_BGR2HSV);
    if z in (res[20:29]):
        redmin = np.array([0, 150, 130])
        redmax = np.array([15, 250, 255])
        img_col_th = cv2.inRange(img_crop_HSV, redmin, redmax)    # colour thresholding
    if z in (res[10:19]):
        green_lower = np.array([70, 50, 60], np.uint8)
        green_upper = np.array([150, 230, 255], np.uint8)
        img_col_th = cv2.inRange(img_crop_HSV, green_lower, green_upper)
    if z in (res[0:9]):
        blue_lower = np.array([90, 150, 230], np.uint8)
        blue_upper = np.array([120, 255, 255], np.uint8)
        img_col_th = cv2.inRange(img_crop_HSV, blue_lower, blue_upper)
    if z in (res[30:40]):
        yellow_lower = np.array([10, 130, 130], np.uint8)
        yellow_upper = np.array([30, 255, 255], np.uint8)
        img_col_th = cv2.inRange(img_crop_HSV, yellow_lower, yellow_upper)

    kernel = np.ones((10, 10),np.uint8)
    img_clos = cv2.morphologyEx(img_col_th, cv2.MORPH_CLOSE, kernel)      # morphology correction
    img_cropp = img_clos[40:124, 70:180]
    #cv2.imshow('colour threshold closed',img_cropp)
    contours, hierarchy = cv2.findContours(img_cropp, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    imgc = img_crop# open the saved image in colour 
    contours = sorted(contours, key=cv2.contourArea,reverse=True)
    for i, c in enumerate(contours):# loop through all the found contours
        if (i == 1) :
            perimeter = cv2.arcLength(c, True)
            area = cv2.contourArea(c)
            shape = area/perimeter
            conts = [len(c),shape, vertex_approx]
            data.append(conts)
                         
            epsilon = 0.01*perimeter    # parameter of polygon approximation: smaller values provide more vertices
            vertex_approx = len(cv2.approxPolyDP(c, epsilon, True))     # approximate with polygon
            cv2.drawContours(imgc, c, 0, (0, 255, 0), 3)   # paint contour c
           
            [x,y,w,h] = cv2.boundingRect(c)
            
print(np.array(data))
print(np.array(labels))
key = cv2.waitKey(0)
cv2.destroyAllWindows()
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis

classifiers = [
    KNeighborsClassifier(3),
    SVC(kernel="linear", C=0.025),
    SVC(gamma=2, C=1),
    GaussianProcessClassifier(1.0 * RBF(1.0)),
    DecisionTreeClassifier(max_depth=5),
    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),
    MLPClassifier(alpha=1, max_iter=2000),
    AdaBoostClassifier(),
    GaussianNB(),
    QuadraticDiscriminantAnalysis()]

names = ["Nearest Neighbors", "Linear SVM", "RBF SVM", "Gaussian Process",
         "Decision Tree", "Random Forest", "Neural Net", "AdaBoost",
         "Naive Bayes", "QDA"]


X = data
y = labels

#X = StandardScaler().fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.8, random_state=42)

for name, clf in zip(names, classifiers):
    clf.fit(X_train, y_train)
    score = clf.score(X_test, y_test)
    print(name, score)

from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(3)    # select the KNN classifier and choose parameter K 
#from sklearn.neural_network imp
clf.fit(X_train, y_train)        # train the classifier with the available data
y_predict = clf.predict(X_test)  # test the classifier on the new data

score = sum(y_predict == y_test)/len(y_test)  # compare the predicted classes with actual ones and compute the muber of correct guesses
print(score*100, '%')

for i in range(len(y_predict)):
    print(y_predict[i], y_test[i])
